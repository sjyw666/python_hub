#研发者：时间遗忘
#开发时间：2022/9/26 15:05

#range（）函数：用于生成一个整数序列，通常在循环中控制循环的次数（在for循环中用作遍历的对象）
#内置函数：不需要加任何前缀就能直接使用的函数
#range(N,M,S)，不包括N
#返回值是一个迭代器对象，看不到序列中的具体数据
'''range类型的优点：不管range对象表示的整数序列有多长，所有gange对象所占用的内存空间都是相同的，
因为仅仅需要存储start,stop和step，只有当用到range对象时，才会去计算序列中的相关元素'''
print(range(1,20,1)) #[1,19]
print(range(1,101,1))#[1,100]#每次加1


#创建range序列的三种方式
#1.range(stop)---->创建一个[0,stop)之间的整数序列，步长为1
'''第一种创建方式：只有一个参数（小括号中只给了一个数）'''
r=range(10)           #存储到变量当中，[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]，默认从零开始，默认相差1称之为步长
print(r)              #结果为range(0, 10)
print(list(r))        #可以使用list的函数，用于查看range对象中的整数序列--->list是列表的意思


#2.range(start,stop)---->创建一个[start,stop)之间的整数序列，步长为1
'''第二种创建方式：给了两个参数（小括号中给了两个数）'''
r=range(1,10)        #指定了起始值，从1开始，到10结束（不包含10），默认步长为1
print(list(r))


#3.range(start,stop,step)---->创建一个[start,stop)之间的整数序列，步长为step
'''第三种创建方式：给了三个参数（小括号中给了三个数）'''
r=range(1,10,2)      #[1, 3, 5, 7, 9]，相邻两个数之间相差2，相差的值不能为小数
print(list(r))


#in和not in判断整数序列中是否存在（不存在）指定的整数
'''判断指定的整数 在序列中是否存在  in，not in'''
print(10 in r)       #False,10不在当前r这个整数序列当中
print(9 in r)        #True

print(10 not in r)   #True
print(9 not in r)    #False












